# A/B testing function for large Permutation Replicates, Moded by Ralph Turchiano (22 JUN 2018)
print("Test Group A Data")
x_1 = int(input("True: "))
x_2 = int(input("False: "))
print("Test Group B Data")
y_1 = int(input("True: "))
y_2 = int(input("False: "))
print("Input the Number of Permutations")
z_0 = int(input())
z_1 = x_1 + x_2
import numpy as np
def permutation_sample(data1, data2):
    data = np.concatenate((data1, data2))
    permuted_data = np.random.permutation(data)
    perm_sample_1 = permuted_data[:len(data1)]
    perm_sample_2 = permuted_data[len(data1):]
    return perm_sample_1, perm_sample_2
def draw_perm_reps(data_1, data_2, func, size=1):
    perm_replicates = np.empty(size)
    for i in range(size):
        perm_sample_1, perm_sample_2 = permutation_sample(data_1, data_2)
        perm_replicates[i] = func(perm_sample_1, perm_sample_2)
    return perm_replicates
a = np.array([True] * x_1 + [False] * x_2)
b = np.array([True] * y_1 + [False] * y_2)
def frac_tru_a(a, b):
    frac = np.sum(a) / len(b)
    return frac
perm_replicates = draw_perm_reps(a, b, frac_tru_a, z_0)
p = np.sum(perm_replicates <= x_1/z_1) / len(perm_replicates)
print('p-value =', p)
